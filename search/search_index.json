{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MIT 6.828 2019 fall \u5b66\u4e60\u7b14\u8bb0 \u8fd9\u662f\u4ec0\u4e48\uff1f \u8fd9\u662f\u4e00\u4efd\u5b66\u4e606.828\u7684\u7b14\u8bb0\uff0c\u5305\u542b\u6211\u7684\u5fc3\u5f97\u548c\u8e29\u8fc7\u7684\u5751\u3002 \u91c7\u5751\u6307\u5357 \u8fd9\u4e0d\u662f\u4ec0\u4e48\uff1f \u8fd9\u4e0d\u662f\u5b66\u4e60\u6307\u5357\uff0c\u4e0d\u662f\u77e5\u8bc6\u603b\u7ed3\uff0c\u4e0d\u4f1a\u5927\u6bb5\u5730\u590d\u5236\u5b98\u7f51\u548c\u8bfe\u672c\u4e0a\u51fa\u73b0\u8fc7\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8bf7\u5148\u8ba4\u771f\u9605\u8bfb\u5b98\u7f51\u548c\u8bfe\u672c\u3002 \u4e00\u4e9b\u53ef\u80fd\u5e2e\u52a9\u5230\u4f60\u7684\u8d44\u6e90 \u6211\u81ea\u5df1\u7684\u4f5c\u4e1a\uff1a git repo \u5176\u4ed6\u4eba\u7684\u4f5c\u4e1a\uff1a https://github.com/KevinDong0810/mit-6-828-fall2019 https://github.com/Jaic1/6.828","title":"\u4e3b\u9875"},{"location":"#mit-6828-2019-fall","text":"","title":"MIT 6.828 2019 fall \u5b66\u4e60\u7b14\u8bb0"},{"location":"#_1","text":"\u8fd9\u662f\u4e00\u4efd\u5b66\u4e606.828\u7684\u7b14\u8bb0\uff0c\u5305\u542b\u6211\u7684\u5fc3\u5f97\u548c\u8e29\u8fc7\u7684\u5751\u3002 \u91c7\u5751\u6307\u5357","title":"\u8fd9\u662f\u4ec0\u4e48\uff1f"},{"location":"#_2","text":"\u8fd9\u4e0d\u662f\u5b66\u4e60\u6307\u5357\uff0c\u4e0d\u662f\u77e5\u8bc6\u603b\u7ed3\uff0c\u4e0d\u4f1a\u5927\u6bb5\u5730\u590d\u5236\u5b98\u7f51\u548c\u8bfe\u672c\u4e0a\u51fa\u73b0\u8fc7\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8bf7\u5148\u8ba4\u771f\u9605\u8bfb\u5b98\u7f51\u548c\u8bfe\u672c\u3002","title":"\u8fd9\u4e0d\u662f\u4ec0\u4e48\uff1f"},{"location":"#_3","text":"\u6211\u81ea\u5df1\u7684\u4f5c\u4e1a\uff1a git repo \u5176\u4ed6\u4eba\u7684\u4f5c\u4e1a\uff1a https://github.com/KevinDong0810/mit-6-828-fall2019 https://github.com/Jaic1/6.828","title":"\u4e00\u4e9b\u53ef\u80fd\u5e2e\u52a9\u5230\u4f60\u7684\u8d44\u6e90"},{"location":"about/","text":"\u5173\u4e8e\u672c\u7ad9\u53ca\u6211\u81ea\u5df1 \u672c\u7ad9\u662f\u7528\u4e8e\u8bb0\u5f55\u6211\u5b66\u4e60mit 6.828\u7684\u8fc7\u7a0b\u548c\u5fc3\u5f97\u3002 \u6b22\u8fce\u8bbf\u95ee \u6211\u7684\u4e3b\u7ad9 \u3002","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"\u672c\u7ad9\u662f\u7528\u4e8e\u8bb0\u5f55\u6211\u5b66\u4e60mit 6.828\u7684\u8fc7\u7a0b\u548c\u5fc3\u5f97\u3002 \u6b22\u8fce\u8bbf\u95ee \u6211\u7684\u4e3b\u7ad9 \u3002","title":"\u5173\u4e8e\u672c\u7ad9\u53ca\u6211\u81ea\u5df1"},{"location":"faq/","text":"FAQ 1. \u4e3a\u4ec0\u4e48\u6211\u5199\u5bf9\u4e86\u5374\u4ecd\u7136\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff1f \u770b\u4e0bgrade-xxx\uff0c\u8fd9\u662f\u6d4b\u8bd5\u6587\u4ef6\uff0c\u91cc\u9762\u6709\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53ef\u4ee5\u6bd4\u5bf9\u4e0b\u3002 2. \u4e3a\u4ec0\u4e48\u6211\u6dfb\u52a0\u4e86.c\u6587\u4ef6\u5374\u65e0\u6cd5\u7f16\u8bd1\uff1f \u4fee\u6539Makefile\u4e2d\u7684UPROGS\u3002\u5982\u679c\u6dfb\u52a0\u7684\u6587\u4ef6\u540d\u4e3a'user/xxx.c'\uff0c\u90a3\u4e48\u5c31\u5728UPROGS\u4e0b\u6dfb\u52a0'$U/_xxx\\' 3. \u5982\u4f55\u9000\u51faqemu emulator\uff1f <Ctrl a + x> 4. \u5b89\u88c5riscv64\u65f6\u9047\u5230\u4e86\u95ee\u9898\uff1f \u5982\u679cmake\u65f6\u51fa\u73b0\u8fd9\u6837\u7684\u9519\u8bef riscv64-unknown-elf-gcc Library not loaded: /usr/local/opt/isl/lib/libisl.21.dylib \u8003\u8651\u4f7f\u7528 \u8fd9\u4e2aissue \u63d0\u5230\u7684\u65b9\u5f0f\u6765\u4fee\u590d $ brew reinstall --build-from-source riscv-gcc","title":"\u8e29\u5751\u6307\u5357"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#1","text":"\u770b\u4e0bgrade-xxx\uff0c\u8fd9\u662f\u6d4b\u8bd5\u6587\u4ef6\uff0c\u91cc\u9762\u6709\u6d4b\u8bd5\u7528\u4f8b\uff0c\u53ef\u4ee5\u6bd4\u5bf9\u4e0b\u3002","title":"1. \u4e3a\u4ec0\u4e48\u6211\u5199\u5bf9\u4e86\u5374\u4ecd\u7136\u65e0\u6cd5\u901a\u8fc7\u6d4b\u8bd5\uff1f"},{"location":"faq/#2-c","text":"\u4fee\u6539Makefile\u4e2d\u7684UPROGS\u3002\u5982\u679c\u6dfb\u52a0\u7684\u6587\u4ef6\u540d\u4e3a'user/xxx.c'\uff0c\u90a3\u4e48\u5c31\u5728UPROGS\u4e0b\u6dfb\u52a0'$U/_xxx\\'","title":"2. \u4e3a\u4ec0\u4e48\u6211\u6dfb\u52a0\u4e86.c\u6587\u4ef6\u5374\u65e0\u6cd5\u7f16\u8bd1\uff1f"},{"location":"faq/#3-qemu-emulator","text":"<Ctrl a + x>","title":"3. \u5982\u4f55\u9000\u51faqemu emulator\uff1f"},{"location":"faq/#4-riscv64","text":"\u5982\u679cmake\u65f6\u51fa\u73b0\u8fd9\u6837\u7684\u9519\u8bef riscv64-unknown-elf-gcc Library not loaded: /usr/local/opt/isl/lib/libisl.21.dylib \u8003\u8651\u4f7f\u7528 \u8fd9\u4e2aissue \u63d0\u5230\u7684\u65b9\u5f0f\u6765\u4fee\u590d $ brew reinstall --build-from-source riscv-gcc","title":"4. \u5b89\u88c5riscv64\u65f6\u9047\u5230\u4e86\u95ee\u9898\uff1f"},{"location":"suggestions/","text":"\u4e00\u4e9b\u5efa\u8bae 1. exlucde\u6389\u4e0d\u5fc5\u8981\u7684\u6587\u4ef6 \u5728.vscode/settings.json\u91cc\u6dfb\u52a0 \"files.exclude\" : { \"**/.*.asm\" : true , \"**/_*\" : true , \"**/*.o\" : true , \"**/*.d\" : true , \"**/*.sym\" : true , \"**/*.asm\" : true \"**/*.pyc\" : true }","title":"\u4e00\u4e9b\u5efa\u8bae"},{"location":"suggestions/#_1","text":"","title":"\u4e00\u4e9b\u5efa\u8bae"},{"location":"suggestions/#1-exlucde","text":"\u5728.vscode/settings.json\u91cc\u6dfb\u52a0 \"files.exclude\" : { \"**/.*.asm\" : true , \"**/_*\" : true , \"**/*.o\" : true , \"**/*.d\" : true , \"**/*.sym\" : true , \"**/*.asm\" : true \"**/*.pyc\" : true }","title":"1. exlucde\u6389\u4e0d\u5fc5\u8981\u7684\u6587\u4ef6"},{"location":"chapter1/file-descriptor/","text":"File Descriptor \u6587\u4ef6\u63cf\u8ff0\u7b26\u662fint\u7c7b\u578b\uff0c\u4ee3\u8868\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u5bf9\u8c61\uff0c\u8fdb\u7a0b\u5bf9\u5b83\u8fdb\u884c\u8bfb/\u5199\u3002 File descriptor\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u80cc\u540e\u53ef\u80fd\u662f\u6587\u4ef6\u3001pipe\u3001\u8bbe\u5907\u3002 \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684file descriptor\uff0c\u7531\u5185\u6838\u7ef4\u62a4\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c31\u5c06file descriptor 0\u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\uff0c1\u4f5c\u4e3a\u6807\u51c6\u8f93\u51fa\uff0c2\u4f5c\u4e3a\u6807\u51c6\u9519\u8bef\u3002 File descriptor\u53ef\u4ee5\u6253\u5f00\uff0c\u53ef\u4ee5\u5173\u95ed\u3002A newly allocated file descriptor is always the lowest- numbered unused descriptor of the current process. \u5982\u679c\u8981\u5206\u914dfile descriptor\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u503c\u662f\u6570\u503c\u6700\u4f4e\u7684\u90a3\u4e2afile descriptor\u3002\u4ece0\u5f00\u59cb\u5411\u4e0a\u8ba1\u7b97\u3002\u5982\u679c\u4e4b\u524d\u4ec0\u4e48\u90fd\u6ca1\u6709\u6253\u5f00\uff0c\u90a3\u4e48\u6253\u5f00\u7684\u4e00\u5b9a\u662ffile descriptor 0\uff0c\u5373\u6807\u51c6\u8f93\u5165\u3002 \u7591\u95ee\uff1a\u4e00\u4e2a\u7684\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c0 1 2\u8fd9\u4e09\u4e2afd\u662f\u4e0d\u662f\u5df2\u7ecf\u9ed8\u8ba4\u6253\u5f00\u4e86\uff1f \u7b54\uff1a\u662f\u7684\u3002","title":"File Descriptor"},{"location":"chapter1/file-descriptor/#file-descriptor","text":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u662fint\u7c7b\u578b\uff0c\u4ee3\u8868\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u5bf9\u8c61\uff0c\u8fdb\u7a0b\u5bf9\u5b83\u8fdb\u884c\u8bfb/\u5199\u3002 File descriptor\u662f\u4e00\u79cd\u62bd\u8c61\uff0c\u80cc\u540e\u53ef\u80fd\u662f\u6587\u4ef6\u3001pipe\u3001\u8bbe\u5907\u3002 \u6bcf\u4e2a\u8fdb\u7a0b\u6709\u81ea\u5df1\u7684file descriptor\uff0c\u7531\u5185\u6838\u7ef4\u62a4\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c31\u5c06file descriptor 0\u4f5c\u4e3a\u6807\u51c6\u8f93\u5165\uff0c1\u4f5c\u4e3a\u6807\u51c6\u8f93\u51fa\uff0c2\u4f5c\u4e3a\u6807\u51c6\u9519\u8bef\u3002 File descriptor\u53ef\u4ee5\u6253\u5f00\uff0c\u53ef\u4ee5\u5173\u95ed\u3002A newly allocated file descriptor is always the lowest- numbered unused descriptor of the current process. \u5982\u679c\u8981\u5206\u914dfile descriptor\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u503c\u662f\u6570\u503c\u6700\u4f4e\u7684\u90a3\u4e2afile descriptor\u3002\u4ece0\u5f00\u59cb\u5411\u4e0a\u8ba1\u7b97\u3002\u5982\u679c\u4e4b\u524d\u4ec0\u4e48\u90fd\u6ca1\u6709\u6253\u5f00\uff0c\u90a3\u4e48\u6253\u5f00\u7684\u4e00\u5b9a\u662ffile descriptor 0\uff0c\u5373\u6807\u51c6\u8f93\u5165\u3002 \u7591\u95ee\uff1a\u4e00\u4e2a\u7684\u8fdb\u7a0b\u542f\u52a8\u65f6\uff0c0 1 2\u8fd9\u4e09\u4e2afd\u662f\u4e0d\u662f\u5df2\u7ecf\u9ed8\u8ba4\u6253\u5f00\u4e86\uff1f \u7b54\uff1a\u662f\u7684\u3002","title":"File Descriptor"},{"location":"chapter1/riscv-pipe-implementation/","text":"riscv pipe\u5b9e\u73b0\u7684\u6ce8\u91ca Line 100 case PIPE : pcmd = ( struct pipecmd * ) cmd ; if ( pipe ( p ) < 0 ) panic ( \"pipe\" ); if ( fork1 () == 0 ){ // \u5bf9\u5de6\u8fb9\u8fdb\u884c\u5904\u7406\uff0c\u5c06\u5de6\u8fb9\u7684\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230pipe\u7684write fd close ( 1 ); dup ( p [ 1 ]); close ( p [ 0 ]); close ( p [ 1 ]); runcmd ( pcmd -> left ); } if ( fork1 () == 0 ){ // \u5bf9\u53f3\u8fb9\u8fdb\u884c\u5904\u7406\uff0c\u5c06\u53f3\u8fb9\u7684\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230pipe\u7684read fd close ( 0 ); dup ( p [ 0 ]); close ( p [ 0 ]); close ( p [ 1 ]); runcmd ( pcmd -> right ); } close ( p [ 0 ]); close ( p [ 1 ]); wait ( 0 ); wait ( 0 ); break ;","title":"Pip Implementation"},{"location":"chapter1/riscv-pipe-implementation/#riscv-pipe","text":"Line 100 case PIPE : pcmd = ( struct pipecmd * ) cmd ; if ( pipe ( p ) < 0 ) panic ( \"pipe\" ); if ( fork1 () == 0 ){ // \u5bf9\u5de6\u8fb9\u8fdb\u884c\u5904\u7406\uff0c\u5c06\u5de6\u8fb9\u7684\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230pipe\u7684write fd close ( 1 ); dup ( p [ 1 ]); close ( p [ 0 ]); close ( p [ 1 ]); runcmd ( pcmd -> left ); } if ( fork1 () == 0 ){ // \u5bf9\u53f3\u8fb9\u8fdb\u884c\u5904\u7406\uff0c\u5c06\u53f3\u8fb9\u7684\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u5230pipe\u7684read fd close ( 0 ); dup ( p [ 0 ]); close ( p [ 0 ]); close ( p [ 1 ]); runcmd ( pcmd -> right ); } close ( p [ 0 ]); close ( p [ 1 ]); wait ( 0 ); wait ( 0 ); break ;","title":"riscv pipe\u5b9e\u73b0\u7684\u6ce8\u91ca"},{"location":"chapter1/system-call/","text":"System call int fork()\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2aint\uff0c\u4ee3\u8868\u5b50\u8fdb\u7a0b\u7684pid, process id\u3002 int wait( xstatus)\uff0c\u7236\u8fdb\u7a0b\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff0c\u8fd4\u56de\u4e00\u4e2aint\uff0c\u4ee3\u8868\u5b50\u8fdb\u7a0b\u7684pid\u3002 xstatus\u662f\u6307\u4f20\u8fdb\u53bb\u4e00\u4e2a\u6307\u9488\uff0cwait\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u4f1a\u628a\u5b50\u8fdb\u7a0b\u7684exit status\u5199\u8fdb\u53bb\u3002\u5982\u679c\u4e0d\u5173\u5fc3\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5wait(0)\u3002 void exec(string filename, string[] args)\u3002exec\u4f1a\u5c06\u5f53\u524d\u8fdb\u7a0b\u8fdb\u884c\u66ff\u6362\uff0c\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u4e00\u4e2a\u6587\u4ef6\uff0c\u5fc5\u987b\u662f\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u52a0\u8f7d\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u4f5c\u4e3a\u65b0\u7684\u8fdb\u7a0b\u3002filename\u5c31\u662f\u6587\u4ef6\u76ee\u5f55\uff0cargs\u662f\u4f20\u9012\u8fc7\u53bb\u7684\u53c2\u6570\u3002 exec\u4f1a\u66ff\u6362\u8fdb\u7a0b\uff0c\u4f46\u4f1a\u590d\u7528\u4e4b\u524d\u7684file descriptor\u3002 \u73b0\u5b9e\u7cfb\u7edf\u4e2d\u7684exec\u8c03\u7528 \u7591\u95ee\uff1aexec family\u7cfb\u7edf\u8c03\u7528\uff0cint execvp(const char * __file, char * const * __argv)\uff0c__argv\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u662f\u4e00\u5b9a\u5f97\u662fNULL\uff0c\u4e5f\u5c31\u662f0\u3002\u611f\u89c9\u5e94\u8be5\u662f\u7684\uff0c\u7528\u8fd9\u4e2a\u8868\u793aEOF\u3002 \u7b54\uff1a\u662f\u7684\u3002 Int read(int fd, byte[] buf, int n). \u4ecefd(file descriptor)\u4e2d\u8bfb\u53d6\u81f3\u591an\u4e2a\u5b57\u8282\u5199\u5165buf\u4e2d\u3002r\u8fd4\u56de\u503c\u662f\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\u8fd4\u56de0\u4ee3\u8868\u5df2\u7ecf\u5230\u8fbe\u6587\u4ef6\u5c3e\u4e86\u3002 int write(fd, buf, n)\u3002\u4ecebuf\u4e2d\u8bfb\u53d6n\u4e2a\u5b57\u8282\u5199\u5165fd\u4e2d\uff0c\u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\u6570\u3002 int close(int fd)\u3002\u5173\u95ed\u4e00\u4e2afile descriptor\uff0c\u4ee5\u4fbf\u80fd\u8ba9\u5176\u4ed6\u7cfb\u7edf\u8c03\u4f7f\u7528\u8fd9\u4e2afd\u3002 int dup(int fd)\u3002duplicate an existing file descriptor\u3002 \u6bd4\u5982\u8bf4\u4f20\u8fdb\u53bb\u4e00\u4e2a1\uff08\u6807\u51c6\u8f93\u51fa\uff09\uff0c\u53ef\u80fd\u8fd4\u56de3\u3002 \u7591\u95ee\uff1a\u90a3\u5982\u679cduplicate \u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684fd\u5462\uff1f\u7b54\uff1a\u7ecf\u8fc7\u8bd5\u9a8c\uff0c\u5f97\u5230\u7684fd\u5373\u4f7f\u5199\u5165\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u7528\u3002 \u5982\u679cdup\u4e4b\u540e\uff0c\u628a\u539f\u6765\u90a3\u4e2aclose\u6389\uff0cdup\u4e4b\u540e\u7684\u90a3\u4e2a\u8fd8\u80fd\u7528\u5417\uff1f\u7b54\uff1a\u7ecf\u8fc7\u8bd5\u9a8c\uff0c\u53ef\u4ee5\u7684\u3002 int pipe(int pipefd[2]); \u521b\u5efa\u7ba1\u9053\u3002pipfd[0]\u4ee3\u8868\u8bfb\uff0c[1]\u4ee3\u8868\u5199\u3002 \u7591\u60d1\uff0c\u4e3a\u4ec0\u4e48\u8981\u5728\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u90fd\u53bb\u5173\u95edpipfd[0] & pipefd[1]\u5462\uff1f \u7b54\uff1a https://stackoverflow.com/questions/19265191/why-should-you-close-a-pipe-in-linux \u89e3\u91ca\u4e86\u7236\u8fdb\u7a0b\u9700\u8981\u5173\u95edread\uff0c\u5b50\u8fdb\u7a0b\u9700\u8981\u5173\u95edwrite\uff0c\u5e76\u4e14\u4e0d\u7528\u7684\u8bdd\u5c31\u9a6c\u4e0a\u5173\u95ed\uff0cfd\u662f\u6709\u9650\u7684\u3002","title":"System Call"},{"location":"chapter1/system-call/#system-call","text":"int fork()\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2aint\uff0c\u4ee3\u8868\u5b50\u8fdb\u7a0b\u7684pid, process id\u3002 int wait( xstatus)\uff0c\u7236\u8fdb\u7a0b\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff0c\u8fd4\u56de\u4e00\u4e2aint\uff0c\u4ee3\u8868\u5b50\u8fdb\u7a0b\u7684pid\u3002 xstatus\u662f\u6307\u4f20\u8fdb\u53bb\u4e00\u4e2a\u6307\u9488\uff0cwait\u8c03\u7528\u7ed3\u675f\u540e\uff0c\u4f1a\u628a\u5b50\u8fdb\u7a0b\u7684exit status\u5199\u8fdb\u53bb\u3002\u5982\u679c\u4e0d\u5173\u5fc3\u7684\u8bdd\uff0c\u53ef\u4ee5\u76f4\u63a5wait(0)\u3002 void exec(string filename, string[] args)\u3002exec\u4f1a\u5c06\u5f53\u524d\u8fdb\u7a0b\u8fdb\u884c\u66ff\u6362\uff0c\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u4e00\u4e2a\u6587\u4ef6\uff0c\u5fc5\u987b\u662f\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u52a0\u8f7d\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u4f5c\u4e3a\u65b0\u7684\u8fdb\u7a0b\u3002filename\u5c31\u662f\u6587\u4ef6\u76ee\u5f55\uff0cargs\u662f\u4f20\u9012\u8fc7\u53bb\u7684\u53c2\u6570\u3002 exec\u4f1a\u66ff\u6362\u8fdb\u7a0b\uff0c\u4f46\u4f1a\u590d\u7528\u4e4b\u524d\u7684file descriptor\u3002 \u73b0\u5b9e\u7cfb\u7edf\u4e2d\u7684exec\u8c03\u7528 \u7591\u95ee\uff1aexec family\u7cfb\u7edf\u8c03\u7528\uff0cint execvp(const char * __file, char * const * __argv)\uff0c__argv\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u4e0d\u662f\u4e00\u5b9a\u5f97\u662fNULL\uff0c\u4e5f\u5c31\u662f0\u3002\u611f\u89c9\u5e94\u8be5\u662f\u7684\uff0c\u7528\u8fd9\u4e2a\u8868\u793aEOF\u3002 \u7b54\uff1a\u662f\u7684\u3002 Int read(int fd, byte[] buf, int n). \u4ecefd(file descriptor)\u4e2d\u8bfb\u53d6\u81f3\u591an\u4e2a\u5b57\u8282\u5199\u5165buf\u4e2d\u3002r\u8fd4\u56de\u503c\u662f\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\u8fd4\u56de0\u4ee3\u8868\u5df2\u7ecf\u5230\u8fbe\u6587\u4ef6\u5c3e\u4e86\u3002 int write(fd, buf, n)\u3002\u4ecebuf\u4e2d\u8bfb\u53d6n\u4e2a\u5b57\u8282\u5199\u5165fd\u4e2d\uff0c\u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\u6570\u3002 int close(int fd)\u3002\u5173\u95ed\u4e00\u4e2afile descriptor\uff0c\u4ee5\u4fbf\u80fd\u8ba9\u5176\u4ed6\u7cfb\u7edf\u8c03\u4f7f\u7528\u8fd9\u4e2afd\u3002 int dup(int fd)\u3002duplicate an existing file descriptor\u3002 \u6bd4\u5982\u8bf4\u4f20\u8fdb\u53bb\u4e00\u4e2a1\uff08\u6807\u51c6\u8f93\u51fa\uff09\uff0c\u53ef\u80fd\u8fd4\u56de3\u3002 \u7591\u95ee\uff1a\u90a3\u5982\u679cduplicate \u4e00\u4e2a\u5df2\u7ecf\u5173\u95ed\u7684fd\u5462\uff1f\u7b54\uff1a\u7ecf\u8fc7\u8bd5\u9a8c\uff0c\u5f97\u5230\u7684fd\u5373\u4f7f\u5199\u5165\uff0c\u4e5f\u6ca1\u4ec0\u4e48\u7528\u3002 \u5982\u679cdup\u4e4b\u540e\uff0c\u628a\u539f\u6765\u90a3\u4e2aclose\u6389\uff0cdup\u4e4b\u540e\u7684\u90a3\u4e2a\u8fd8\u80fd\u7528\u5417\uff1f\u7b54\uff1a\u7ecf\u8fc7\u8bd5\u9a8c\uff0c\u53ef\u4ee5\u7684\u3002 int pipe(int pipefd[2]); \u521b\u5efa\u7ba1\u9053\u3002pipfd[0]\u4ee3\u8868\u8bfb\uff0c[1]\u4ee3\u8868\u5199\u3002 \u7591\u60d1\uff0c\u4e3a\u4ec0\u4e48\u8981\u5728\u5b50\u8fdb\u7a0b\u548c\u7236\u8fdb\u7a0b\u90fd\u53bb\u5173\u95edpipfd[0] & pipefd[1]\u5462\uff1f \u7b54\uff1a https://stackoverflow.com/questions/19265191/why-should-you-close-a-pipe-in-linux \u89e3\u91ca\u4e86\u7236\u8fdb\u7a0b\u9700\u8981\u5173\u95edread\uff0c\u5b50\u8fdb\u7a0b\u9700\u8981\u5173\u95edwrite\uff0c\u5e76\u4e14\u4e0d\u7528\u7684\u8bdd\u5c31\u9a6c\u4e0a\u5173\u95ed\uff0cfd\u662f\u6709\u9650\u7684\u3002","title":"System call"},{"location":"lab1/csp/","text":"CSP\u98ce\u683c primes\u4f5c\u4e1a\u4e2d\u63d0\u5230\u4e86CSP\u3002 \u53ef\u4ee5\u53c2\u8003golang\u7248\u7684concurrent primes sieve\uff08\u6e90\u81eaGolang\u5b98\u7f51\uff09\u3002 // A concurrent prime sieve package main import \"fmt\" // Send the sequence 2, 3, 4, ... to channel 'ch'. func Generate ( ch chan <- int ) { for i := 2 ; ; i ++ { ch <- i // Send 'i' to channel 'ch'. } } // Copy the values from channel 'in' to channel 'out', // removing those divisible by 'prime'. func Filter ( in <- chan int , out chan <- int , prime int ) { for { i := <- in // Receive value from 'in'. if i % prime != 0 { out <- i // Send 'i' to 'out'. } } } // The prime sieve: Daisy-chain Filter processes. func main () { ch := make ( chan int ) // Create a new channel. go Generate ( ch ) // Launch Generate goroutine. for i := 0 ; i < 10 ; i ++ { prime := <- ch fmt . Println ( prime ) ch1 := make ( chan int ) go Filter ( ch , ch1 , prime ) ch = ch1 } }","title":"Golang\u7248Primes"},{"location":"lab1/csp/#csp","text":"primes\u4f5c\u4e1a\u4e2d\u63d0\u5230\u4e86CSP\u3002 \u53ef\u4ee5\u53c2\u8003golang\u7248\u7684concurrent primes sieve\uff08\u6e90\u81eaGolang\u5b98\u7f51\uff09\u3002 // A concurrent prime sieve package main import \"fmt\" // Send the sequence 2, 3, 4, ... to channel 'ch'. func Generate ( ch chan <- int ) { for i := 2 ; ; i ++ { ch <- i // Send 'i' to channel 'ch'. } } // Copy the values from channel 'in' to channel 'out', // removing those divisible by 'prime'. func Filter ( in <- chan int , out chan <- int , prime int ) { for { i := <- in // Receive value from 'in'. if i % prime != 0 { out <- i // Send 'i' to 'out'. } } } // The prime sieve: Daisy-chain Filter processes. func main () { ch := make ( chan int ) // Create a new channel. go Generate ( ch ) // Launch Generate goroutine. for i := 0 ; i < 10 ; i ++ { prime := <- ch fmt . Println ( prime ) ch1 := make ( chan int ) go Filter ( ch , ch1 , prime ) ch = ch1 } }","title":"CSP\u98ce\u683c"},{"location":"lab1/ls/","text":"ls\u5b9e\u73b0\u6ce8\u91ca \u6e90\u4ee3\u7801 \uff0c\u7b2c55\u884c\u3002 \u8fd9\u91cc\u9762\u8fd9\u4e48\u591a\u82b1\u91cc\u80e1\u54e8\u7684\uff0c\u5168\u662f\u56e0\u4e3a\u6807\u51c6\u5e93\u4e0d\u5168\uff0c\u5199\u4f5c\u4e1a\u80fd\u628a\u4eba\u7d2f\u6b7b\u3002 strcpy ( buf , path ); // \u6b64\u65f6\uff1apath\u4e3a'.', buf\u4e3a'.' p = buf + strlen ( buf ); * p ++ = '/' ; // \u7ed9\u6dfb\u52a0\u4e2a/\u7684\u672b\u5c3e\uff0cbuf: './' while ( read ( fd , & de , sizeof ( de )) == sizeof ( de )){ if ( de . inum == 0 ) continue ; memmove ( p , de . name , DIRSIZ ); // \u7ed9buf\u6dfb\u52a0\u4e0a\u6587\u4ef6\u540d\u6587\u4ef6\u540d, \u6bd4\u5982'./file_a'","title":"ls\u5b9e\u73b0\u6ce8\u91ca"},{"location":"lab1/ls/#ls","text":"\u6e90\u4ee3\u7801 \uff0c\u7b2c55\u884c\u3002 \u8fd9\u91cc\u9762\u8fd9\u4e48\u591a\u82b1\u91cc\u80e1\u54e8\u7684\uff0c\u5168\u662f\u56e0\u4e3a\u6807\u51c6\u5e93\u4e0d\u5168\uff0c\u5199\u4f5c\u4e1a\u80fd\u628a\u4eba\u7d2f\u6b7b\u3002 strcpy ( buf , path ); // \u6b64\u65f6\uff1apath\u4e3a'.', buf\u4e3a'.' p = buf + strlen ( buf ); * p ++ = '/' ; // \u7ed9\u6dfb\u52a0\u4e2a/\u7684\u672b\u5c3e\uff0cbuf: './' while ( read ( fd , & de , sizeof ( de )) == sizeof ( de )){ if ( de . inum == 0 ) continue ; memmove ( p , de . name , DIRSIZ ); // \u7ed9buf\u6dfb\u52a0\u4e0a\u6587\u4ef6\u540d\u6587\u4ef6\u540d, \u6bd4\u5982'./file_a'","title":"ls\u5b9e\u73b0\u6ce8\u91ca"}]}